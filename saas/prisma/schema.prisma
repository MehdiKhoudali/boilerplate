// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model Organization {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  description   String?
  logo          String?
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @default(now()) @map(name: "updated_at")
  
  // Billing information
  billingEmail  String?
  billingName   String?
  billingAddress String?
  
  // Settings
  settings      Json?
  
  // Relationships
  users         OrganizationUser[]
  files         File[]
  messages      Message[]
  markdowns     Markdown[]

  // Creator relationship
  createdBy     User     @relation("CreatedOrganizations", fields: [createdById], references: [id], onDelete: Restrict, onUpdate: Restrict)
  createdById   String
  
  // Default organization for users
  defaultForUsers User[] @relation("DefaultOrganization")

  @@map(name: "organizations")
  @@index([createdById])
}

enum OrganizationUserRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

model OrganizationUser {
  id             String               @id @default(cuid())
  role           OrganizationUserRole @default(MEMBER)
  createdAt      DateTime             @default(now()) @map(name: "created_at")
  updatedAt      DateTime             @default(now()) @map(name: "updated_at")
  
  // Invitation status
  invitationToken String?             @unique
  invitationAccepted Boolean          @default(false)
  invitationSentAt DateTime?
  
  // Relationships
  organization   Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  user           User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String

  @@unique([organizationId, userId])
  @@map(name: "organization_users")
  @@index([organizationId])
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  File    File[]
  Message Message[]

  accounts Account[]
  sessions Session[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  credits Int @default(10)

  markdowns Markdown[]
  
  // Organization relationships
  organizations         OrganizationUser[]
  createdOrganizations  Organization[]     @relation("CreatedOrganizations")
  
  // Default organization (if any)
  defaultOrganization   Organization?      @relation("DefaultOrganization", fields: [defaultOrganizationId], references: [id], onDelete: SetNull, onUpdate: Restrict)
  defaultOrganizationId String?

  @@map(name: "users")
  @@index([defaultOrganizationId])
}

model Markdown {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  
  // Organization relationship
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  @@map(name: "markdowns")
  @@index([userId])
  @@index([organizationId])
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id   String @id @default(cuid())
  name String

  uploadStatus UploadStatus @default(PENDING)
  url          String
  key          String
  messages     Message[]

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  User User? @relation(fields: [userId], references: [id])
  userId String?
  
  // Organization relationship
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  @@map(name: "files")
  @@index([userId])
  @@index([organizationId])
}

model Message {
  id   String @id @default(cuid())
  text String @db.Text()

  isUserMessage Boolean

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  File      File?         @relation(fields: [fileId], references: [id])
  fileId    String?
  User      User?         @relation(fields: [userId], references: [id])
  userId    String?
  
  // Organization relationship
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  @@map(name: "messages")
  @@index([fileId])
  @@index([userId])
  @@index([organizationId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}